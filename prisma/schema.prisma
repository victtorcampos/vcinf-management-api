// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/config/prisma-client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Usuario {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  email      String            @unique
  password   String
  role       Role              @default(NOOB)
  contadores UsuarioContador[]
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Contador {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  nome         String
  cpf          String             @unique
  regcrc       String             @unique
  telefone     String?
  email        String?
  usuarios     UsuarioContador[]
  emitentes    ContadorEmitente[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  endereco     Endereco?
  certificados Certificado[]
}

model UsuarioContador {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  usuarioId  String   @db.ObjectId
  contadorId String   @db.ObjectId
  Usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  contador   Contador @relation(fields: [contadorId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, contadorId])
}

model ContadorEmitente {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  emitenteId String   @db.ObjectId
  contadorId String   @db.ObjectId
  emitente   Emitente @relation(fields: [emitenteId], references: [id], onDelete: Cascade)
  contador   Contador @relation(fields: [contadorId], references: [id], onDelete: Cascade)

  @@unique([emitenteId, contadorId])
}

model Emitente {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  cod_dominio  String?
  nome         String
  razao_social String
  cnpj         String?
  cpf          String?
  IE           String
  enderecos    Endereco[]
  contadores   ContadorEmitente[]
  contadorId   String?            @db.ObjectId
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@unique([cnpj, IE])
  @@unique([cpf, IE])
}

model Certificado {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  requerente String?
  validade   DateTime?
  fileBase64 String?
  contador   Contador? @relation(fields: [contadorId], references: [id], onDelete: Cascade)
  contadorId String?   @db.ObjectId
  createdAt  DateTime  @default(now())
}

model Endereco {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  tipo             String    @default("PRINCIPAL")
  logradouro       String
  nro              String
  complemento      String?
  bairro           String
  cep              String
  nome_cidade      String
  codigoIBGEcidade String
  nome_estado      String
  uf               String
  codigoIBGEestado String
  contador         Contador? @relation(fields: [contadorId], references: [id], onDelete: Cascade)
  contadorId       String?   @unique @db.ObjectId
  emitente         Emitente? @relation(fields: [emitenteId], references: [id], onDelete: Cascade)
  emitenteId       String?   @db.ObjectId
}

enum Role {
  ADMIN
  USER
  NOOB
  SUPERVISOR
}
