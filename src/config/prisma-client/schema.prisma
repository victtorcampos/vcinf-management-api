// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/config/prisma-client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  email      String         @unique
  password   String
  role       Role           @default(NOOB)
  contadores UserContador[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Contador {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  nome             String
  cpf              String         @unique
  regcrc           String         @unique
  telefone         String?
  email            String?
  usuarios         UserContador[]
  Emitentes        Emitente[]
  logradouro       String?
  nro              String?
  complemento      String?
  bairro           String?
  cep              String?
  nome_cidade      String?
  codigoIBGEcidade String?
  nome_estado      String?
  uf               String?
  codigoIBGEestado String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  Endereco         Endereco[]
}

model UserContador {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  contadorId String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contador   Contador @relation(fields: [contadorId], references: [id], onDelete: Cascade)

  @@unique([userId, contadorId])
}

model Emitente {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  cod_dominio  String?
  nome         String
  razao_social String
  cnpj         String?
  cpf          String?
  IE           String
  enderecos    Endereco[]
  contador     Contador?  @relation(fields: [contadorId], references: [id], onDelete: Cascade)
  contadorId   String?    @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([cnpj, IE])
  @@unique([cpf, IE])
}

model Endereco {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  tipo             String    @default("PRINCIPAL")
  logradouro       String
  nro              String
  complemento      String?
  bairro           String
  cep              String
  nome_cidade      String
  codigoIBGEcidade String
  nome_estado      String
  uf               String
  codigoIBGEestado String
  contador         Contador? @relation(fields: [contadorId], references: [id], onDelete: Cascade)
  contadorId       String?   @db.ObjectId
  emitente         Emitente? @relation(fields: [emitenteId], references: [id], onDelete: Cascade)
  emitenteId       String?   @db.ObjectId
}

enum Role {
  ADMIN
  USER
  NOOB
  SUPERVISOR
}
